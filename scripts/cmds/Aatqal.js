const { createCanvas, loadImage } = require("canvas");
const axios = require("axios");
const fs = require("fs-extra");
const path = require("path");

module.exports = {
  config: {
    name: "Ø§Ø¹ØªÙ‚Ø§Ù„",
    aliases: ["arrest"],
    version: "1.1",
    author: "milan-says | ØªØ¹Ø¯ÙŠÙ„ Ù…Ø­Ù…Ø¯",
    countDown: 5,
    role: 0,
    shortDescription: "Ù‚Ù… Ø¨Ø¥Ø¹Ù‚Ø§Ù„ Ù…Ù† Ø®Ø±Ù‚ Ø§Ù„Ù‚ÙˆØ§Ù†ÙŠÙ†",
    longDescription: "Ø¥Ø¹ØªÙ‚Ø§Ù„ Ø£Ø­Ø¯ Ù…Ø§ Ø§Ù†Ø·Ù„Ø§Ù‚Ø§ Ù…Ù† ÙˆØ¶Ø¹Ùƒ Ù„Ù„ØªØ§Øº Ø£Ùˆ Ø§Ù„Ø±Ø¯ Ø¹Ù„ÙŠÙ‡",
    category: "Ù…ÙŠÙ…Ø² ÙˆØªØ¹Ø¯ÙŠÙ„ Ø§Ù„ØµÙˆØ±",
    guide: "{pn} [@ØªØ§Øº] | Ø§Ù„Ø±Ø¯ Ø¹Ù„Ù‰ Ø±Ø³Ø§Ù„Ø©"
  },

  onStart: async function({ api, event }) {
    const mention = Object.keys(event.mentions);
    let one = event.senderID, two;

    // Ø§Ù„ØªØ§Øº
    if (mention.length > 0) {
      two = mention[0];
    }
    // Ø§Ù„Ø±Ø¯ Ø¹Ù„Ù‰ Ø±Ø³Ø§Ù„Ø©
    else if (event.type === "message_reply") {
      two = event.messageReply.senderID;
    }
    else {
      return api.sendMessage("Ø£Ø±Ø¬ÙˆÙƒ Ù‚Ù… Ø¨Ø¹Ù…Ù„ Ù…Ù†Ø´Ù† Ø£Ùˆ Ø±Ø¯ Ø¹Ù„Ù‰ Ø±Ø³Ø§Ù„Ø© Ø§Ù„Ø´Ø®Øµ Ø§Ù„Ø°ÙŠ ØªØ±ÙŠØ¯ Ø¥Ø¹ØªÙ‚Ø§Ù„Ù‡", event.threadID, event.messageID);
    }

    try {
      const outputPath = await bal(one, two);
      api.sendMessage(
        {
          body: "Ø£Ù†Øª Ø±Ù‡Ù† Ø§Ù„Ø¥Ø¹ØªÙ‚Ø§Ù„ ðŸ‘®ðŸ”—",
          attachment: fs.createReadStream(outputPath)
        },
        event.threadID,
        () => fs.unlink(outputPath, () => {}),
        event.messageID
      );
    } catch (err) {
      console.error(err);
      api.sendMessage("Ø­Ø¯Ø« Ø®Ø·Ø£ Ø£Ø«Ù†Ø§Ø¡ ØªØ¬Ù‡ÙŠØ² Ø§Ù„ØµÙˆØ±Ø©.", event.threadID, event.messageID);
    }
  }
};

async function bal(one, two) {
  const templateURL = "https://i.imgur.com/ep1gG3r.png";
  const token = "6628568379%7Cc1e620fa708a1d5696fb991c1bde5662";

  const avoneURL = `https://graph.facebook.com/${one}/picture?width=512&height=512&access_token=${token}`;
  const avtwoURL = `https://graph.facebook.com/${two}/picture?width=512&height=512&access_token=${token}`;

  const [bg, avoneImg, avtwoImg] = await Promise.all([
    loadImage(templateURL),
    loadImage(await fetchImageBuffer(avoneURL)),
    loadImage(await fetchImageBuffer(avtwoURL))
  ]);

  const canvas = createCanvas(bg.width, bg.height);
  const ctx = canvas.getContext("2d");

  ctx.drawImage(bg, 0, 0);

  function drawCircleImage(img, x, y, size) {
    ctx.save();
    ctx.beginPath();
    ctx.arc(x + size / 2, y + size / 2, size / 2, 0, Math.PI * 2);
    ctx.closePath();
    ctx.clip();
    ctx.drawImage(img, x, y, size, size);
    ctx.restore();
  }

  drawCircleImage(avoneImg, 375, 9, 100);
  drawCircleImage(avtwoImg, 160, 92, 100);

  const outputPath = path.join(__dirname, "fak.png");
  await fs.writeFile(outputPath, canvas.toBuffer("image/png"));

  return outputPath;
}

async function fetchImageBuffer(url) {
  const response = await axios.get(url, { responseType: "arraybuffer" });
  return response.data;
}
